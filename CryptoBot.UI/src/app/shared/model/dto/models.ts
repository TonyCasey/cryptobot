/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.1.0 (NJsonSchema v9.10.26.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class BotResponseDto implements IBotResponseDto {
    botId?: number | null;
    name?: string | null;
    baseCoinId?: number | null;
    coinId?: number | null;
    exchangeId?: number | null;
    active?: boolean | null;
    currentPositionId?: number | null;
    amount?: number | null;
    orderType?: BotResponseDtoOrderType | null;
    candleSize?: BotResponseDtoCandleSize | null;
    accumulator?: boolean | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IBotResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.botId = data["botId"] !== undefined ? data["botId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.baseCoinId = data["baseCoinId"] !== undefined ? data["baseCoinId"] : <any>null;
            this.coinId = data["coinId"] !== undefined ? data["coinId"] : <any>null;
            this.exchangeId = data["exchangeId"] !== undefined ? data["exchangeId"] : <any>null;
            this.active = data["active"] !== undefined ? data["active"] : <any>null;
            this.currentPositionId = data["currentPositionId"] !== undefined ? data["currentPositionId"] : <any>null;
            this.amount = data["amount"] !== undefined ? data["amount"] : <any>null;
            this.orderType = data["orderType"] !== undefined ? data["orderType"] : <any>null;
            this.candleSize = data["candleSize"] !== undefined ? data["candleSize"] : <any>null;
            this.accumulator = data["accumulator"] !== undefined ? data["accumulator"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): BotResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BotResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["botId"] = this.botId !== undefined ? this.botId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["baseCoinId"] = this.baseCoinId !== undefined ? this.baseCoinId : <any>null;
        data["coinId"] = this.coinId !== undefined ? this.coinId : <any>null;
        data["exchangeId"] = this.exchangeId !== undefined ? this.exchangeId : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["currentPositionId"] = this.currentPositionId !== undefined ? this.currentPositionId : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["orderType"] = this.orderType !== undefined ? this.orderType : <any>null;
        data["candleSize"] = this.candleSize !== undefined ? this.candleSize : <any>null;
        data["accumulator"] = this.accumulator !== undefined ? this.accumulator : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IBotResponseDto {
    botId?: number | null;
    name?: string | null;
    baseCoinId?: number | null;
    coinId?: number | null;
    exchangeId?: number | null;
    active?: boolean | null;
    currentPositionId?: number | null;
    amount?: number | null;
    orderType?: BotResponseDtoOrderType | null;
    candleSize?: BotResponseDtoCandleSize | null;
    accumulator?: boolean | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class BotRequestDto implements IBotRequestDto {
    botId?: number | null;
    name?: string | null;
    baseCoinId?: number | null;
    coinId?: number | null;
    exchangeId?: number | null;
    active?: boolean | null;
    currentPositionId?: number | null;
    amount?: number | null;
    orderType?: BotRequestDtoOrderType | null;
    candleSize?: BotRequestDtoCandleSize | null;
    accumulator?: boolean | null;

    constructor(data?: IBotRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.botId = data["botId"] !== undefined ? data["botId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.baseCoinId = data["baseCoinId"] !== undefined ? data["baseCoinId"] : <any>null;
            this.coinId = data["coinId"] !== undefined ? data["coinId"] : <any>null;
            this.exchangeId = data["exchangeId"] !== undefined ? data["exchangeId"] : <any>null;
            this.active = data["active"] !== undefined ? data["active"] : <any>null;
            this.currentPositionId = data["currentPositionId"] !== undefined ? data["currentPositionId"] : <any>null;
            this.amount = data["amount"] !== undefined ? data["amount"] : <any>null;
            this.orderType = data["orderType"] !== undefined ? data["orderType"] : <any>null;
            this.candleSize = data["candleSize"] !== undefined ? data["candleSize"] : <any>null;
            this.accumulator = data["accumulator"] !== undefined ? data["accumulator"] : <any>null;
        }
    }

    static fromJS(data: any): BotRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new BotRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["botId"] = this.botId !== undefined ? this.botId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["baseCoinId"] = this.baseCoinId !== undefined ? this.baseCoinId : <any>null;
        data["coinId"] = this.coinId !== undefined ? this.coinId : <any>null;
        data["exchangeId"] = this.exchangeId !== undefined ? this.exchangeId : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["currentPositionId"] = this.currentPositionId !== undefined ? this.currentPositionId : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["orderType"] = this.orderType !== undefined ? this.orderType : <any>null;
        data["candleSize"] = this.candleSize !== undefined ? this.candleSize : <any>null;
        data["accumulator"] = this.accumulator !== undefined ? this.accumulator : <any>null;
        return data; 
    }
}

export interface IBotRequestDto {
    botId?: number | null;
    name?: string | null;
    baseCoinId?: number | null;
    coinId?: number | null;
    exchangeId?: number | null;
    active?: boolean | null;
    currentPositionId?: number | null;
    amount?: number | null;
    orderType?: BotRequestDtoOrderType | null;
    candleSize?: BotRequestDtoCandleSize | null;
    accumulator?: boolean | null;
}

export class BotSearchResponseDto implements IBotSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: BotResponseDto[] | null;

    constructor(data?: IBotSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(BotResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BotSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BotSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBotSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: BotResponseDto[] | null;
}

export class ConfigResponseDto implements IConfigResponseDto {
    supports_search?: boolean | null;
    supports_group_request?: boolean | null;
    supports_marks?: boolean | null;
    supports_timescale_marks?: boolean | null;
    supports_time?: boolean | null;
    exchanges?: ChartExchange[] | null;
    symbols_types?: SymbolType[] | null;
    supported_resolutions?: string[] | null;

    constructor(data?: IConfigResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.supports_search = data["supports_search"] !== undefined ? data["supports_search"] : <any>null;
            this.supports_group_request = data["supports_group_request"] !== undefined ? data["supports_group_request"] : <any>null;
            this.supports_marks = data["supports_marks"] !== undefined ? data["supports_marks"] : <any>null;
            this.supports_timescale_marks = data["supports_timescale_marks"] !== undefined ? data["supports_timescale_marks"] : <any>null;
            this.supports_time = data["supports_time"] !== undefined ? data["supports_time"] : <any>null;
            if (data["exchanges"] && data["exchanges"].constructor === Array) {
                this.exchanges = [];
                for (let item of data["exchanges"])
                    this.exchanges.push(ChartExchange.fromJS(item));
            }
            if (data["symbols_types"] && data["symbols_types"].constructor === Array) {
                this.symbols_types = [];
                for (let item of data["symbols_types"])
                    this.symbols_types.push(SymbolType.fromJS(item));
            }
            if (data["supported_resolutions"] && data["supported_resolutions"].constructor === Array) {
                this.supported_resolutions = [];
                for (let item of data["supported_resolutions"])
                    this.supported_resolutions.push(item);
            }
        }
    }

    static fromJS(data: any): ConfigResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supports_search"] = this.supports_search !== undefined ? this.supports_search : <any>null;
        data["supports_group_request"] = this.supports_group_request !== undefined ? this.supports_group_request : <any>null;
        data["supports_marks"] = this.supports_marks !== undefined ? this.supports_marks : <any>null;
        data["supports_timescale_marks"] = this.supports_timescale_marks !== undefined ? this.supports_timescale_marks : <any>null;
        data["supports_time"] = this.supports_time !== undefined ? this.supports_time : <any>null;
        if (this.exchanges && this.exchanges.constructor === Array) {
            data["exchanges"] = [];
            for (let item of this.exchanges)
                data["exchanges"].push(item.toJSON());
        }
        if (this.symbols_types && this.symbols_types.constructor === Array) {
            data["symbols_types"] = [];
            for (let item of this.symbols_types)
                data["symbols_types"].push(item.toJSON());
        }
        if (this.supported_resolutions && this.supported_resolutions.constructor === Array) {
            data["supported_resolutions"] = [];
            for (let item of this.supported_resolutions)
                data["supported_resolutions"].push(item);
        }
        return data; 
    }
}

export interface IConfigResponseDto {
    supports_search?: boolean | null;
    supports_group_request?: boolean | null;
    supports_marks?: boolean | null;
    supports_timescale_marks?: boolean | null;
    supports_time?: boolean | null;
    exchanges?: ChartExchange[] | null;
    symbols_types?: SymbolType[] | null;
    supported_resolutions?: string[] | null;
}

export class ChartExchange implements IChartExchange {
    value?: string | null;
    name?: string | null;
    desc?: string | null;

    constructor(data?: IChartExchange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.desc = data["desc"] !== undefined ? data["desc"] : <any>null;
        }
    }

    static fromJS(data: any): ChartExchange {
        data = typeof data === 'object' ? data : {};
        let result = new ChartExchange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["desc"] = this.desc !== undefined ? this.desc : <any>null;
        return data; 
    }
}

export interface IChartExchange {
    value?: string | null;
    name?: string | null;
    desc?: string | null;
}

export class SymbolType implements ISymbolType {
    name?: string | null;
    value?: string | null;

    constructor(data?: ISymbolType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
        }
    }

    static fromJS(data: any): SymbolType {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface ISymbolType {
    name?: string | null;
    value?: string | null;
}

export class SymbolsResponseDto implements ISymbolsResponseDto {
    name?: string | null;
    exchangeTraded?: string | null;
    exchangeListed?: string | null;
    timezone?: string | null;
    minmov?: number | null;
    minmov2?: number | null;
    pointvalue?: number | null;
    session?: string | null;
    has_intraday?: boolean | null;
    has_no_volume?: boolean | null;
    description?: string | null;
    type?: string | null;
    supported_resolutions?: string[] | null;
    pricescale?: number | null;
    ticker?: string | null;

    constructor(data?: ISymbolsResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.exchangeTraded = data["exchange-traded"] !== undefined ? data["exchange-traded"] : <any>null;
            this.exchangeListed = data["exchange-listed"] !== undefined ? data["exchange-listed"] : <any>null;
            this.timezone = data["timezone"] !== undefined ? data["timezone"] : <any>null;
            this.minmov = data["minmov"] !== undefined ? data["minmov"] : <any>null;
            this.minmov2 = data["minmov2"] !== undefined ? data["minmov2"] : <any>null;
            this.pointvalue = data["pointvalue"] !== undefined ? data["pointvalue"] : <any>null;
            this.session = data["session"] !== undefined ? data["session"] : <any>null;
            this.has_intraday = data["has_intraday"] !== undefined ? data["has_intraday"] : <any>null;
            this.has_no_volume = data["has_no_volume"] !== undefined ? data["has_no_volume"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            if (data["supported_resolutions"] && data["supported_resolutions"].constructor === Array) {
                this.supported_resolutions = [];
                for (let item of data["supported_resolutions"])
                    this.supported_resolutions.push(item);
            }
            this.pricescale = data["pricescale"] !== undefined ? data["pricescale"] : <any>null;
            this.ticker = data["ticker"] !== undefined ? data["ticker"] : <any>null;
        }
    }

    static fromJS(data: any): SymbolsResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolsResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["exchange-traded"] = this.exchangeTraded !== undefined ? this.exchangeTraded : <any>null;
        data["exchange-listed"] = this.exchangeListed !== undefined ? this.exchangeListed : <any>null;
        data["timezone"] = this.timezone !== undefined ? this.timezone : <any>null;
        data["minmov"] = this.minmov !== undefined ? this.minmov : <any>null;
        data["minmov2"] = this.minmov2 !== undefined ? this.minmov2 : <any>null;
        data["pointvalue"] = this.pointvalue !== undefined ? this.pointvalue : <any>null;
        data["session"] = this.session !== undefined ? this.session : <any>null;
        data["has_intraday"] = this.has_intraday !== undefined ? this.has_intraday : <any>null;
        data["has_no_volume"] = this.has_no_volume !== undefined ? this.has_no_volume : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        if (this.supported_resolutions && this.supported_resolutions.constructor === Array) {
            data["supported_resolutions"] = [];
            for (let item of this.supported_resolutions)
                data["supported_resolutions"].push(item);
        }
        data["pricescale"] = this.pricescale !== undefined ? this.pricescale : <any>null;
        data["ticker"] = this.ticker !== undefined ? this.ticker : <any>null;
        return data; 
    }
}

export interface ISymbolsResponseDto {
    name?: string | null;
    exchangeTraded?: string | null;
    exchangeListed?: string | null;
    timezone?: string | null;
    minmov?: number | null;
    minmov2?: number | null;
    pointvalue?: number | null;
    session?: string | null;
    has_intraday?: boolean | null;
    has_no_volume?: boolean | null;
    description?: string | null;
    type?: string | null;
    supported_resolutions?: string[] | null;
    pricescale?: number | null;
    ticker?: string | null;
}

export class SymbolInfoResponseDto implements ISymbolInfoResponseDto {
    symbol?: string[] | null;
    description?: string[] | null;
    exchangeListed?: string | null;
    exchangeTraded?: string | null;
    minmovement?: number | null;
    minmovement2?: number | null;
    pricescale?: number[] | null;
    hasDwm?: boolean | null;
    hasIntraday?: boolean | null;
    hasNoVolume?: boolean[] | null;
    type?: string[] | null;
    ticker?: string[] | null;
    timezone?: string | null;
    sessionRegular?: string | null;

    constructor(data?: ISymbolInfoResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["symbol"] && data["symbol"].constructor === Array) {
                this.symbol = [];
                for (let item of data["symbol"])
                    this.symbol.push(item);
            }
            if (data["description"] && data["description"].constructor === Array) {
                this.description = [];
                for (let item of data["description"])
                    this.description.push(item);
            }
            this.exchangeListed = data["exchange-listed"] !== undefined ? data["exchange-listed"] : <any>null;
            this.exchangeTraded = data["exchange-traded"] !== undefined ? data["exchange-traded"] : <any>null;
            this.minmovement = data["minmovement"] !== undefined ? data["minmovement"] : <any>null;
            this.minmovement2 = data["minmovement2"] !== undefined ? data["minmovement2"] : <any>null;
            if (data["pricescale"] && data["pricescale"].constructor === Array) {
                this.pricescale = [];
                for (let item of data["pricescale"])
                    this.pricescale.push(item);
            }
            this.hasDwm = data["has-dwm"] !== undefined ? data["has-dwm"] : <any>null;
            this.hasIntraday = data["has-intraday"] !== undefined ? data["has-intraday"] : <any>null;
            if (data["has-no-volume"] && data["has-no-volume"].constructor === Array) {
                this.hasNoVolume = [];
                for (let item of data["has-no-volume"])
                    this.hasNoVolume.push(item);
            }
            if (data["type"] && data["type"].constructor === Array) {
                this.type = [];
                for (let item of data["type"])
                    this.type.push(item);
            }
            if (data["ticker"] && data["ticker"].constructor === Array) {
                this.ticker = [];
                for (let item of data["ticker"])
                    this.ticker.push(item);
            }
            this.timezone = data["timezone"] !== undefined ? data["timezone"] : <any>null;
            this.sessionRegular = data["session-regular"] !== undefined ? data["session-regular"] : <any>null;
        }
    }

    static fromJS(data: any): SymbolInfoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolInfoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.symbol && this.symbol.constructor === Array) {
            data["symbol"] = [];
            for (let item of this.symbol)
                data["symbol"].push(item);
        }
        if (this.description && this.description.constructor === Array) {
            data["description"] = [];
            for (let item of this.description)
                data["description"].push(item);
        }
        data["exchange-listed"] = this.exchangeListed !== undefined ? this.exchangeListed : <any>null;
        data["exchange-traded"] = this.exchangeTraded !== undefined ? this.exchangeTraded : <any>null;
        data["minmovement"] = this.minmovement !== undefined ? this.minmovement : <any>null;
        data["minmovement2"] = this.minmovement2 !== undefined ? this.minmovement2 : <any>null;
        if (this.pricescale && this.pricescale.constructor === Array) {
            data["pricescale"] = [];
            for (let item of this.pricescale)
                data["pricescale"].push(item);
        }
        data["has-dwm"] = this.hasDwm !== undefined ? this.hasDwm : <any>null;
        data["has-intraday"] = this.hasIntraday !== undefined ? this.hasIntraday : <any>null;
        if (this.hasNoVolume && this.hasNoVolume.constructor === Array) {
            data["has-no-volume"] = [];
            for (let item of this.hasNoVolume)
                data["has-no-volume"].push(item);
        }
        if (this.type && this.type.constructor === Array) {
            data["type"] = [];
            for (let item of this.type)
                data["type"].push(item);
        }
        if (this.ticker && this.ticker.constructor === Array) {
            data["ticker"] = [];
            for (let item of this.ticker)
                data["ticker"].push(item);
        }
        data["timezone"] = this.timezone !== undefined ? this.timezone : <any>null;
        data["session-regular"] = this.sessionRegular !== undefined ? this.sessionRegular : <any>null;
        return data; 
    }
}

export interface ISymbolInfoResponseDto {
    symbol?: string[] | null;
    description?: string[] | null;
    exchangeListed?: string | null;
    exchangeTraded?: string | null;
    minmovement?: number | null;
    minmovement2?: number | null;
    pricescale?: number[] | null;
    hasDwm?: boolean | null;
    hasIntraday?: boolean | null;
    hasNoVolume?: boolean[] | null;
    type?: string[] | null;
    ticker?: string[] | null;
    timezone?: string | null;
    sessionRegular?: string | null;
}

export class SymbolSearchResponseDto implements ISymbolSearchResponseDto {
    symbol?: string | null;
    full_name?: string | null;
    description?: string | null;
    exchange?: string | null;
    ticker?: string | null;
    type?: string | null;

    constructor(data?: ISymbolSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.symbol = data["symbol"] !== undefined ? data["symbol"] : <any>null;
            this.full_name = data["full_name"] !== undefined ? data["full_name"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.exchange = data["exchange"] !== undefined ? data["exchange"] : <any>null;
            this.ticker = data["ticker"] !== undefined ? data["ticker"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
        }
    }

    static fromJS(data: any): SymbolSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["symbol"] = this.symbol !== undefined ? this.symbol : <any>null;
        data["full_name"] = this.full_name !== undefined ? this.full_name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["exchange"] = this.exchange !== undefined ? this.exchange : <any>null;
        data["ticker"] = this.ticker !== undefined ? this.ticker : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export interface ISymbolSearchResponseDto {
    symbol?: string | null;
    full_name?: string | null;
    description?: string | null;
    exchange?: string | null;
    ticker?: string | null;
    type?: string | null;
}

export class HistoryResponseDto implements IHistoryResponseDto {
    s?: string | null;
    t?: number[] | null;
    o?: number[] | null;
    h?: number[] | null;
    l?: number[] | null;
    c?: number[] | null;
    v?: number[] | null;

    constructor(data?: IHistoryResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.s = data["s"] !== undefined ? data["s"] : <any>null;
            if (data["t"] && data["t"].constructor === Array) {
                this.t = [];
                for (let item of data["t"])
                    this.t.push(item);
            }
            if (data["o"] && data["o"].constructor === Array) {
                this.o = [];
                for (let item of data["o"])
                    this.o.push(item);
            }
            if (data["h"] && data["h"].constructor === Array) {
                this.h = [];
                for (let item of data["h"])
                    this.h.push(item);
            }
            if (data["l"] && data["l"].constructor === Array) {
                this.l = [];
                for (let item of data["l"])
                    this.l.push(item);
            }
            if (data["c"] && data["c"].constructor === Array) {
                this.c = [];
                for (let item of data["c"])
                    this.c.push(item);
            }
            if (data["v"] && data["v"].constructor === Array) {
                this.v = [];
                for (let item of data["v"])
                    this.v.push(item);
            }
        }
    }

    static fromJS(data: any): HistoryResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new HistoryResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["s"] = this.s !== undefined ? this.s : <any>null;
        if (this.t && this.t.constructor === Array) {
            data["t"] = [];
            for (let item of this.t)
                data["t"].push(item);
        }
        if (this.o && this.o.constructor === Array) {
            data["o"] = [];
            for (let item of this.o)
                data["o"].push(item);
        }
        if (this.h && this.h.constructor === Array) {
            data["h"] = [];
            for (let item of this.h)
                data["h"].push(item);
        }
        if (this.l && this.l.constructor === Array) {
            data["l"] = [];
            for (let item of this.l)
                data["l"].push(item);
        }
        if (this.c && this.c.constructor === Array) {
            data["c"] = [];
            for (let item of this.c)
                data["c"].push(item);
        }
        if (this.v && this.v.constructor === Array) {
            data["v"] = [];
            for (let item of this.v)
                data["v"].push(item);
        }
        return data; 
    }
}

export interface IHistoryResponseDto {
    s?: string | null;
    t?: number[] | null;
    o?: number[] | null;
    h?: number[] | null;
    l?: number[] | null;
    c?: number[] | null;
    v?: number[] | null;
}

export class MarksResponseDto implements IMarksResponseDto {
    id?: number[] | null;
    time?: number[] | null;
    color?: string[] | null;
    text?: string[] | null;
    label?: string[] | null;
    labelFontColor?: string[] | null;
    minSize?: number[] | null;

    constructor(data?: IMarksResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["id"] && data["id"].constructor === Array) {
                this.id = [];
                for (let item of data["id"])
                    this.id.push(item);
            }
            if (data["time"] && data["time"].constructor === Array) {
                this.time = [];
                for (let item of data["time"])
                    this.time.push(item);
            }
            if (data["color"] && data["color"].constructor === Array) {
                this.color = [];
                for (let item of data["color"])
                    this.color.push(item);
            }
            if (data["text"] && data["text"].constructor === Array) {
                this.text = [];
                for (let item of data["text"])
                    this.text.push(item);
            }
            if (data["label"] && data["label"].constructor === Array) {
                this.label = [];
                for (let item of data["label"])
                    this.label.push(item);
            }
            if (data["labelFontColor"] && data["labelFontColor"].constructor === Array) {
                this.labelFontColor = [];
                for (let item of data["labelFontColor"])
                    this.labelFontColor.push(item);
            }
            if (data["minSize"] && data["minSize"].constructor === Array) {
                this.minSize = [];
                for (let item of data["minSize"])
                    this.minSize.push(item);
            }
        }
    }

    static fromJS(data: any): MarksResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new MarksResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.id && this.id.constructor === Array) {
            data["id"] = [];
            for (let item of this.id)
                data["id"].push(item);
        }
        if (this.time && this.time.constructor === Array) {
            data["time"] = [];
            for (let item of this.time)
                data["time"].push(item);
        }
        if (this.color && this.color.constructor === Array) {
            data["color"] = [];
            for (let item of this.color)
                data["color"].push(item);
        }
        if (this.text && this.text.constructor === Array) {
            data["text"] = [];
            for (let item of this.text)
                data["text"].push(item);
        }
        if (this.label && this.label.constructor === Array) {
            data["label"] = [];
            for (let item of this.label)
                data["label"].push(item);
        }
        if (this.labelFontColor && this.labelFontColor.constructor === Array) {
            data["labelFontColor"] = [];
            for (let item of this.labelFontColor)
                data["labelFontColor"].push(item);
        }
        if (this.minSize && this.minSize.constructor === Array) {
            data["minSize"] = [];
            for (let item of this.minSize)
                data["minSize"].push(item);
        }
        return data; 
    }
}

export interface IMarksResponseDto {
    id?: number[] | null;
    time?: number[] | null;
    color?: string[] | null;
    text?: string[] | null;
    label?: string[] | null;
    labelFontColor?: string[] | null;
    minSize?: number[] | null;
}

export class CoinResponseDto implements ICoinResponseDto {
    coinId?: number | null;
    code?: string | null;
    orderRoundingExponent?: number | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: ICoinResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.coinId = data["coinId"] !== undefined ? data["coinId"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.orderRoundingExponent = data["orderRoundingExponent"] !== undefined ? data["orderRoundingExponent"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): CoinResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CoinResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coinId"] = this.coinId !== undefined ? this.coinId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["orderRoundingExponent"] = this.orderRoundingExponent !== undefined ? this.orderRoundingExponent : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface ICoinResponseDto {
    coinId?: number | null;
    code?: string | null;
    orderRoundingExponent?: number | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class CoinRequestDto implements ICoinRequestDto {
    coinId?: number | null;
    code?: string | null;
    orderRoundingExponent?: number | null;

    constructor(data?: ICoinRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.coinId = data["coinId"] !== undefined ? data["coinId"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.orderRoundingExponent = data["orderRoundingExponent"] !== undefined ? data["orderRoundingExponent"] : <any>null;
        }
    }

    static fromJS(data: any): CoinRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CoinRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coinId"] = this.coinId !== undefined ? this.coinId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["orderRoundingExponent"] = this.orderRoundingExponent !== undefined ? this.orderRoundingExponent : <any>null;
        return data; 
    }
}

export interface ICoinRequestDto {
    coinId?: number | null;
    code?: string | null;
    orderRoundingExponent?: number | null;
}

export class CoinSearchResponseDto implements ICoinSearchResponseDto {
    description?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: CoinResponseDto[] | null;

    constructor(data?: ICoinSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(CoinResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CoinSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CoinSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICoinSearchResponseDto {
    description?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: CoinResponseDto[] | null;
}

export class ExchangeResponseDto implements IExchangeResponseDto {
    exchangeId?: number | null;
    name?: string | null;
    code?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IExchangeResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exchangeId = data["exchangeId"] !== undefined ? data["exchangeId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): ExchangeResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExchangeResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exchangeId"] = this.exchangeId !== undefined ? this.exchangeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IExchangeResponseDto {
    exchangeId?: number | null;
    name?: string | null;
    code?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class ExchangeRequestDto implements IExchangeRequestDto {
    exchangeId?: number | null;
    name?: string | null;
    code?: string | null;

    constructor(data?: IExchangeRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exchangeId = data["exchangeId"] !== undefined ? data["exchangeId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.code = data["code"] !== undefined ? data["code"] : <any>null;
        }
    }

    static fromJS(data: any): ExchangeRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExchangeRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exchangeId"] = this.exchangeId !== undefined ? this.exchangeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        return data; 
    }
}

export interface IExchangeRequestDto {
    exchangeId?: number | null;
    name?: string | null;
    code?: string | null;
}

export class ExchangeSearchResponseDto implements IExchangeSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: ExchangeResponseDto[] | null;

    constructor(data?: IExchangeSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ExchangeResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExchangeSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExchangeSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IExchangeSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: ExchangeResponseDto[] | null;
}

export class IndicatorResponseDto implements IIndicatorResponseDto {
    indicatorId?: number | null;
    indicatorType?: IndicatorResponseDtoIndicatorType | null;
    useForBuy?: boolean | null;
    useForSell?: boolean | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IIndicatorResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.indicatorId = data["indicatorId"] !== undefined ? data["indicatorId"] : <any>null;
            this.indicatorType = data["indicatorType"] !== undefined ? data["indicatorType"] : <any>null;
            this.useForBuy = data["useForBuy"] !== undefined ? data["useForBuy"] : <any>null;
            this.useForSell = data["useForSell"] !== undefined ? data["useForSell"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): IndicatorResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new IndicatorResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatorId"] = this.indicatorId !== undefined ? this.indicatorId : <any>null;
        data["indicatorType"] = this.indicatorType !== undefined ? this.indicatorType : <any>null;
        data["useForBuy"] = this.useForBuy !== undefined ? this.useForBuy : <any>null;
        data["useForSell"] = this.useForSell !== undefined ? this.useForSell : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IIndicatorResponseDto {
    indicatorId?: number | null;
    indicatorType?: IndicatorResponseDtoIndicatorType | null;
    useForBuy?: boolean | null;
    useForSell?: boolean | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class IndicatorRequestDto implements IIndicatorRequestDto {
    indicatorId?: number | null;
    indicatorType?: IndicatorRequestDtoIndicatorType | null;
    useForBuy?: boolean | null;
    useForSell?: boolean | null;

    constructor(data?: IIndicatorRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.indicatorId = data["indicatorId"] !== undefined ? data["indicatorId"] : <any>null;
            this.indicatorType = data["indicatorType"] !== undefined ? data["indicatorType"] : <any>null;
            this.useForBuy = data["useForBuy"] !== undefined ? data["useForBuy"] : <any>null;
            this.useForSell = data["useForSell"] !== undefined ? data["useForSell"] : <any>null;
        }
    }

    static fromJS(data: any): IndicatorRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new IndicatorRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatorId"] = this.indicatorId !== undefined ? this.indicatorId : <any>null;
        data["indicatorType"] = this.indicatorType !== undefined ? this.indicatorType : <any>null;
        data["useForBuy"] = this.useForBuy !== undefined ? this.useForBuy : <any>null;
        data["useForSell"] = this.useForSell !== undefined ? this.useForSell : <any>null;
        return data; 
    }
}

export interface IIndicatorRequestDto {
    indicatorId?: number | null;
    indicatorType?: IndicatorRequestDtoIndicatorType | null;
    useForBuy?: boolean | null;
    useForSell?: boolean | null;
}

export class IndicatorSearchResponseDto implements IIndicatorSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: IndicatorResponseDto[] | null;

    constructor(data?: IIndicatorSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(IndicatorResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IndicatorSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new IndicatorSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIndicatorSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: IndicatorResponseDto[] | null;
}

export class OrderResponseDto implements IOrderResponseDto {
    orderId?: number | null;
    ourRef?: string | null;
    symbol?: string | null;
    exchangeOrderId?: string | null;
    price?: number | null;
    quantity?: number | null;
    quantityFilled?: number | null;
    orderDate?: Date | null;
    status?: OrderResponseDtoStatus | null;
    side?: OrderResponseDtoSide | null;
    type?: OrderResponseDtoType | null;
    timeStamp?: Date | null;
    positionId?: number | null;
    botId?: number | null;
    fees?: number | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IOrderResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"] !== undefined ? data["orderId"] : <any>null;
            this.ourRef = data["ourRef"] !== undefined ? data["ourRef"] : <any>null;
            this.symbol = data["symbol"] !== undefined ? data["symbol"] : <any>null;
            this.exchangeOrderId = data["exchangeOrderId"] !== undefined ? data["exchangeOrderId"] : <any>null;
            this.price = data["price"] !== undefined ? data["price"] : <any>null;
            this.quantity = data["quantity"] !== undefined ? data["quantity"] : <any>null;
            this.quantityFilled = data["quantityFilled"] !== undefined ? data["quantityFilled"] : <any>null;
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.side = data["side"] !== undefined ? data["side"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.timeStamp = data["timeStamp"] ? new Date(data["timeStamp"].toString()) : <any>null;
            this.positionId = data["positionId"] !== undefined ? data["positionId"] : <any>null;
            this.botId = data["botId"] !== undefined ? data["botId"] : <any>null;
            this.fees = data["fees"] !== undefined ? data["fees"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): OrderResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
        data["ourRef"] = this.ourRef !== undefined ? this.ourRef : <any>null;
        data["symbol"] = this.symbol !== undefined ? this.symbol : <any>null;
        data["exchangeOrderId"] = this.exchangeOrderId !== undefined ? this.exchangeOrderId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["quantityFilled"] = this.quantityFilled !== undefined ? this.quantityFilled : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["side"] = this.side !== undefined ? this.side : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["timeStamp"] = this.timeStamp ? this.timeStamp.toISOString() : <any>null;
        data["positionId"] = this.positionId !== undefined ? this.positionId : <any>null;
        data["botId"] = this.botId !== undefined ? this.botId : <any>null;
        data["fees"] = this.fees !== undefined ? this.fees : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IOrderResponseDto {
    orderId?: number | null;
    ourRef?: string | null;
    symbol?: string | null;
    exchangeOrderId?: string | null;
    price?: number | null;
    quantity?: number | null;
    quantityFilled?: number | null;
    orderDate?: Date | null;
    status?: OrderResponseDtoStatus | null;
    side?: OrderResponseDtoSide | null;
    type?: OrderResponseDtoType | null;
    timeStamp?: Date | null;
    positionId?: number | null;
    botId?: number | null;
    fees?: number | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class OrderRequestDto implements IOrderRequestDto {
    orderId?: number | null;
    ourRef?: string | null;
    botId?: number | null;
    positionId?: number | null;
    price?: number | null;
    quantity?: number | null;
    quantityFilled?: number | null;
    status?: OrderRequestDtoStatus | null;
    side?: OrderRequestDtoSide | null;
    type?: OrderRequestDtoType | null;
    fees?: number | null;
    orderDate?: Date | null;

    constructor(data?: IOrderRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"] !== undefined ? data["orderId"] : <any>null;
            this.ourRef = data["ourRef"] !== undefined ? data["ourRef"] : <any>null;
            this.botId = data["botId"] !== undefined ? data["botId"] : <any>null;
            this.positionId = data["positionId"] !== undefined ? data["positionId"] : <any>null;
            this.price = data["price"] !== undefined ? data["price"] : <any>null;
            this.quantity = data["quantity"] !== undefined ? data["quantity"] : <any>null;
            this.quantityFilled = data["quantityFilled"] !== undefined ? data["quantityFilled"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.side = data["side"] !== undefined ? data["side"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.fees = data["fees"] !== undefined ? data["fees"] : <any>null;
            this.orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): OrderRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
        data["ourRef"] = this.ourRef !== undefined ? this.ourRef : <any>null;
        data["botId"] = this.botId !== undefined ? this.botId : <any>null;
        data["positionId"] = this.positionId !== undefined ? this.positionId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["quantityFilled"] = this.quantityFilled !== undefined ? this.quantityFilled : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["side"] = this.side !== undefined ? this.side : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["fees"] = this.fees !== undefined ? this.fees : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IOrderRequestDto {
    orderId?: number | null;
    ourRef?: string | null;
    botId?: number | null;
    positionId?: number | null;
    price?: number | null;
    quantity?: number | null;
    quantityFilled?: number | null;
    status?: OrderRequestDtoStatus | null;
    side?: OrderRequestDtoSide | null;
    type?: OrderRequestDtoType | null;
    fees?: number | null;
    orderDate?: Date | null;
}

export class OrderSearchResponseDto implements IOrderSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: OrderResponseDto[] | null;

    constructor(data?: IOrderSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(OrderResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: OrderResponseDto[] | null;
}

export class PositionResponseDto implements IPositionResponseDto {
    positionId?: number | null;
    botId?: number | null;
    side?: PositionResponseDtoSide | null;
    buyPrice?: number | null;
    sellPrice?: number | null;
    quantity?: number | null;
    commission?: number | null;
    netProfit?: number | null;
    netProfitPercent?: number | null;
    grossProfit?: number | null;
    grossProfitPercent?: number | null;
    buyTimeStamp?: Date | null;
    buyRequestExchangeReference?: string | null;
    sellTimeStamp?: Date | null;
    sellRequestExchangeReference?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IPositionResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.positionId = data["positionId"] !== undefined ? data["positionId"] : <any>null;
            this.botId = data["botId"] !== undefined ? data["botId"] : <any>null;
            this.side = data["side"] !== undefined ? data["side"] : <any>null;
            this.buyPrice = data["buyPrice"] !== undefined ? data["buyPrice"] : <any>null;
            this.sellPrice = data["sellPrice"] !== undefined ? data["sellPrice"] : <any>null;
            this.quantity = data["quantity"] !== undefined ? data["quantity"] : <any>null;
            this.commission = data["commission"] !== undefined ? data["commission"] : <any>null;
            this.netProfit = data["netProfit"] !== undefined ? data["netProfit"] : <any>null;
            this.netProfitPercent = data["netProfitPercent"] !== undefined ? data["netProfitPercent"] : <any>null;
            this.grossProfit = data["grossProfit"] !== undefined ? data["grossProfit"] : <any>null;
            this.grossProfitPercent = data["grossProfitPercent"] !== undefined ? data["grossProfitPercent"] : <any>null;
            this.buyTimeStamp = data["buyTimeStamp"] ? new Date(data["buyTimeStamp"].toString()) : <any>null;
            this.buyRequestExchangeReference = data["buyRequestExchangeReference"] !== undefined ? data["buyRequestExchangeReference"] : <any>null;
            this.sellTimeStamp = data["sellTimeStamp"] ? new Date(data["sellTimeStamp"].toString()) : <any>null;
            this.sellRequestExchangeReference = data["sellRequestExchangeReference"] !== undefined ? data["sellRequestExchangeReference"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): PositionResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PositionResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["positionId"] = this.positionId !== undefined ? this.positionId : <any>null;
        data["botId"] = this.botId !== undefined ? this.botId : <any>null;
        data["side"] = this.side !== undefined ? this.side : <any>null;
        data["buyPrice"] = this.buyPrice !== undefined ? this.buyPrice : <any>null;
        data["sellPrice"] = this.sellPrice !== undefined ? this.sellPrice : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["commission"] = this.commission !== undefined ? this.commission : <any>null;
        data["netProfit"] = this.netProfit !== undefined ? this.netProfit : <any>null;
        data["netProfitPercent"] = this.netProfitPercent !== undefined ? this.netProfitPercent : <any>null;
        data["grossProfit"] = this.grossProfit !== undefined ? this.grossProfit : <any>null;
        data["grossProfitPercent"] = this.grossProfitPercent !== undefined ? this.grossProfitPercent : <any>null;
        data["buyTimeStamp"] = this.buyTimeStamp ? this.buyTimeStamp.toISOString() : <any>null;
        data["buyRequestExchangeReference"] = this.buyRequestExchangeReference !== undefined ? this.buyRequestExchangeReference : <any>null;
        data["sellTimeStamp"] = this.sellTimeStamp ? this.sellTimeStamp.toISOString() : <any>null;
        data["sellRequestExchangeReference"] = this.sellRequestExchangeReference !== undefined ? this.sellRequestExchangeReference : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IPositionResponseDto {
    positionId?: number | null;
    botId?: number | null;
    side?: PositionResponseDtoSide | null;
    buyPrice?: number | null;
    sellPrice?: number | null;
    quantity?: number | null;
    commission?: number | null;
    netProfit?: number | null;
    netProfitPercent?: number | null;
    grossProfit?: number | null;
    grossProfitPercent?: number | null;
    buyTimeStamp?: Date | null;
    buyRequestExchangeReference?: string | null;
    sellTimeStamp?: Date | null;
    sellRequestExchangeReference?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class PositionRequestDto implements IPositionRequestDto {
    botId?: number | null;
    side?: PositionRequestDtoSide | null;

    constructor(data?: IPositionRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.botId = data["botId"] !== undefined ? data["botId"] : <any>null;
            this.side = data["side"] !== undefined ? data["side"] : <any>null;
        }
    }

    static fromJS(data: any): PositionRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new PositionRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["botId"] = this.botId !== undefined ? this.botId : <any>null;
        data["side"] = this.side !== undefined ? this.side : <any>null;
        return data; 
    }
}

export interface IPositionRequestDto {
    botId?: number | null;
    side?: PositionRequestDtoSide | null;
}

export class PositionSearchResponseDto implements IPositionSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: PositionResponseDto[] | null;

    constructor(data?: IPositionSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PositionResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PositionSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PositionSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPositionSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: PositionResponseDto[] | null;
}

export class RuleResponseDto implements IRuleResponseDto {
    ruleId?: number | null;
    indicatorRuleTypeId?: number | null;
    value?: number | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IRuleResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ruleId = data["ruleId"] !== undefined ? data["ruleId"] : <any>null;
            this.indicatorRuleTypeId = data["indicatorRuleTypeId"] !== undefined ? data["indicatorRuleTypeId"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): RuleResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleId"] = this.ruleId !== undefined ? this.ruleId : <any>null;
        data["indicatorRuleTypeId"] = this.indicatorRuleTypeId !== undefined ? this.indicatorRuleTypeId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IRuleResponseDto {
    ruleId?: number | null;
    indicatorRuleTypeId?: number | null;
    value?: number | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class RuleRequestDto implements IRuleRequestDto {
    ruleId?: number | null;
    indicatorRuleTypeId?: number | null;
    value?: number | null;

    constructor(data?: IRuleRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ruleId = data["ruleId"] !== undefined ? data["ruleId"] : <any>null;
            this.indicatorRuleTypeId = data["indicatorRuleTypeId"] !== undefined ? data["indicatorRuleTypeId"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
        }
    }

    static fromJS(data: any): RuleRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleId"] = this.ruleId !== undefined ? this.ruleId : <any>null;
        data["indicatorRuleTypeId"] = this.indicatorRuleTypeId !== undefined ? this.indicatorRuleTypeId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IRuleRequestDto {
    ruleId?: number | null;
    indicatorRuleTypeId?: number | null;
    value?: number | null;
}

export class RuleSearchResponseDto implements IRuleSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: RuleResponseDto[] | null;

    constructor(data?: IRuleSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RuleResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RuleSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRuleSearchResponseDto {
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: RuleResponseDto[] | null;
}

export class RuleSetResponseDto implements IRuleSetResponseDto {
    rulesetId?: number | null;
    description?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;

    constructor(data?: IRuleSetResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rulesetId = data["rulesetId"] !== undefined ? data["rulesetId"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
        }
    }

    static fromJS(data: any): RuleSetResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleSetResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rulesetId"] = this.rulesetId !== undefined ? this.rulesetId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        return data; 
    }
}

export interface IRuleSetResponseDto {
    rulesetId?: number | null;
    description?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
}

export class RuleSetRequestDto implements IRuleSetRequestDto {
    rulesetId?: number | null;
    description?: string | null;

    constructor(data?: IRuleSetRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rulesetId = data["rulesetId"] !== undefined ? data["rulesetId"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): RuleSetRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleSetRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rulesetId"] = this.rulesetId !== undefined ? this.rulesetId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IRuleSetRequestDto {
    rulesetId?: number | null;
    description?: string | null;
}

export class RuleSetSearchResponseDto implements IRuleSetSearchResponseDto {
    description?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: RuleSetResponseDto[] | null;

    constructor(data?: IRuleSetSearchResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.lastUpdateTime = data["lastUpdateTime"] ? new Date(data["lastUpdateTime"].toString()) : <any>null;
            this.lastUpdateUser = data["lastUpdateUser"] !== undefined ? data["lastUpdateUser"] : <any>null;
            this.recordCount = data["recordCount"] !== undefined ? data["recordCount"] : <any>null;
            this.totalRecordCount = data["totalRecordCount"] !== undefined ? data["totalRecordCount"] : <any>null;
            this.pageNumber = data["pageNumber"] !== undefined ? data["pageNumber"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RuleSetResponseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RuleSetSearchResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleSetSearchResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>null;
        data["lastUpdateUser"] = this.lastUpdateUser !== undefined ? this.lastUpdateUser : <any>null;
        data["recordCount"] = this.recordCount !== undefined ? this.recordCount : <any>null;
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRuleSetSearchResponseDto {
    description?: string | null;
    lastUpdateTime?: Date | null;
    lastUpdateUser?: string | null;
    recordCount?: number | null;
    totalRecordCount?: number | null;
    pageNumber?: number | null;
    pageSize?: number | null;
    data?: RuleSetResponseDto[] | null;
}

export enum IndicatorType {
    Macd = <any>"Macd", 
    Volume = <any>"Volume", 
}

export enum Side {
    Buy = <any>"Buy", 
    Sell = <any>"Sell", 
}

export enum Side2 {
    Buy = <any>"Buy", 
    Sell = <any>"Sell", 
}

export enum BotResponseDtoOrderType {
    Limit = <any>"Limit", 
    Stop = <any>"Stop", 
    Market = <any>"Market", 
}

export enum BotResponseDtoCandleSize {
    OneMinute = <any>"OneMinute", 
    ThreeMinute = <any>"ThreeMinute", 
    FiveMinute = <any>"FiveMinute", 
    TenMinute = <any>"TenMinute", 
    FifteenMinute = <any>"FifteenMinute", 
    ThirtyMinute = <any>"ThirtyMinute", 
    SixtyMinute = <any>"SixtyMinute", 
    FourHours = <any>"FourHours", 
    SixHours = <any>"SixHours", 
    TwelveHours = <any>"TwelveHours", 
    TwentyFourHours = <any>"TwentyFourHours", 
}

export enum BotRequestDtoOrderType {
    Limit = <any>"Limit", 
    Stop = <any>"Stop", 
    Market = <any>"Market", 
}

export enum BotRequestDtoCandleSize {
    OneMinute = <any>"OneMinute", 
    ThreeMinute = <any>"ThreeMinute", 
    FiveMinute = <any>"FiveMinute", 
    TenMinute = <any>"TenMinute", 
    FifteenMinute = <any>"FifteenMinute", 
    ThirtyMinute = <any>"ThirtyMinute", 
    SixtyMinute = <any>"SixtyMinute", 
    FourHours = <any>"FourHours", 
    SixHours = <any>"SixHours", 
    TwelveHours = <any>"TwelveHours", 
    TwentyFourHours = <any>"TwentyFourHours", 
}

export enum IndicatorResponseDtoIndicatorType {
    Macd = <any>"Macd", 
    Volume = <any>"Volume", 
}

export enum IndicatorRequestDtoIndicatorType {
    Macd = <any>"Macd", 
    Volume = <any>"Volume", 
}

export enum OrderResponseDtoStatus {
    Unknown = <any>"Unknown", 
    Filled = <any>"Filled", 
    FilledPartially = <any>"FilledPartially", 
    Pending = <any>"Pending", 
    Error = <any>"Error", 
    Canceled = <any>"Canceled", 
}

export enum OrderResponseDtoSide {
    Buy = <any>"Buy", 
    Sell = <any>"Sell", 
}

export enum OrderResponseDtoType {
    Limit = <any>"Limit", 
    Stop = <any>"Stop", 
    Market = <any>"Market", 
}

export enum OrderRequestDtoStatus {
    Unknown = <any>"Unknown", 
    Filled = <any>"Filled", 
    FilledPartially = <any>"FilledPartially", 
    Pending = <any>"Pending", 
    Error = <any>"Error", 
    Canceled = <any>"Canceled", 
}

export enum OrderRequestDtoSide {
    Buy = <any>"Buy", 
    Sell = <any>"Sell", 
}

export enum OrderRequestDtoType {
    Limit = <any>"Limit", 
    Stop = <any>"Stop", 
    Market = <any>"Market", 
}

export enum PositionResponseDtoSide {
    Buy = <any>"Buy", 
    Sell = <any>"Sell", 
}

export enum PositionRequestDtoSide {
    Buy = <any>"Buy", 
    Sell = <any>"Sell", 
}